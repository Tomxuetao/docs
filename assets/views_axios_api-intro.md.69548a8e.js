import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.ca65985f.js";const u=JSON.parse('{"title":"Axios API","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"views/axios/api-intro.md","filePath":"views/axios/api-intro.md","lastUpdated":1693909462000}'),l={name:"views/axios/api-intro.md"},o=p(`<h1 id="axios-api" tabindex="-1">Axios API <a class="header-anchor" href="#axios-api" aria-label="Permalink to &quot;Axios API&quot;">​</a></h1><h2 id="axios-api参考" tabindex="-1">Axios API参考 <a class="header-anchor" href="#axios-api参考" aria-label="Permalink to &quot;Axios API参考&quot;">​</a></h2><p>可以向 <code>axios</code> 传递相关配置来创建请求</p><p>axios(config)</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 发起一个post请求</span></span>
<span class="line"><span style="color:#B392F0;">axios</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  url: </span><span style="color:#9ECBFF;">&#39;/user/12345&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  data: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    firstName: </span><span style="color:#9ECBFF;">&#39;Fred&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    lastName: </span><span style="color:#9ECBFF;">&#39;Flintstone&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 发起一个post请求</span></span>
<span class="line"><span style="color:#6F42C1;">axios</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&#39;post&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  url: </span><span style="color:#032F62;">&#39;/user/12345&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  data: {</span></span>
<span class="line"><span style="color:#24292E;">    firstName: </span><span style="color:#032F62;">&#39;Fred&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    lastName: </span><span style="color:#032F62;">&#39;Flintstone&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 在 node.js 用GET请求获取远程图片</span></span>
<span class="line"><span style="color:#B392F0;">axios</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  method: </span><span style="color:#9ECBFF;">&#39;get&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  url: </span><span style="color:#9ECBFF;">&#39;http://bit.ly/2mTM3nY&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  responseType: </span><span style="color:#9ECBFF;">&#39;stream&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">  .</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.data.</span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(fs.</span><span style="color:#B392F0;">createWriteStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;ada_lovelace.jpg&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 在 node.js 用GET请求获取远程图片</span></span>
<span class="line"><span style="color:#6F42C1;">axios</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  method: </span><span style="color:#032F62;">&#39;get&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  url: </span><span style="color:#032F62;">&#39;http://bit.ly/2mTM3nY&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  responseType: </span><span style="color:#032F62;">&#39;stream&#39;</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">  .</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">response</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    response.data.</span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(fs.</span><span style="color:#6F42C1;">createWriteStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;ada_lovelace.jpg&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span></code></pre></div><p>axios(url[, config])</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 发起一个 GET 请求 (默认请求方式)</span></span>
<span class="line"><span style="color:#B392F0;">axios</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/user/12345&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 发起一个 GET 请求 (默认请求方式)</span></span>
<span class="line"><span style="color:#6F42C1;">axios</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/user/12345&#39;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="请求方式别名" tabindex="-1">请求方式别名 <a class="header-anchor" href="#请求方式别名" aria-label="Permalink to &quot;请求方式别名&quot;">​</a></h2><p>为了方便起见，已经为所有支持的请求方法提供了别名。</p><p>axios.request(config)</p><p>axios.get(url[, config])</p><p>axios.delete(url[, config])</p><p>axios.head(url[, config])</p><p>axios.options(url[, config])</p><p>axios.post(url[, data[, config]])</p><p>axios.put(url[, data[, config]])</p><p>axios.patch(url[, data[, config]])</p><p>axios.postForm(url[, data[, config]])</p><p>axios.putForm(url[, data[, config]])</p><p>axios.patchForm(url[, data[, config]])</p><div class="tip custom-block"><p class="custom-block-title">注意</p><p>在使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性都不必在配置中指定。</p></div>`,22),e=[o];function t(c,r,i,E,y,d){return a(),n("div",null,e)}const F=s(l,[["render",t]]);export{u as __pageData,F as default};
